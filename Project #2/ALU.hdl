// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Considring this pipeline :
    // X -> X after zx -> X after nx 
    // There must be a gate that determines whether we apply the operation of the gate or not
    // I'm using Mux gate for this and same applies for Y
    And16(a=x , b=false , out=zerox );
    Mux16(a=x , b=zerox , sel=zx , out=zxout );
    Not16(in=zxout , out=notx );
    Mux16(a=zxout , b=notx , sel=nx , out=nxout );
    // Y part
    And16(a=y , b=false , out=zeroy );
    Mux16(a=y , b=zeroy , sel=zy , out=zyout );
    Not16(in=zyout , out=noty );
    Mux16(a=zyout , b=noty , sel=ny , out=nyout );
    // Same logic applies for the F part 
    // X&Y
    And16(a=nyout , b=nxout , out=xandy );
    // X+Y
    Add16(a =nyout , b =nxout , out =xplusy );
    // Filtering gates
    Mux16(a=xandy , b=xplusy , sel=f , out=temp );
    Not16(in=temp , out=nottemp );
    // Output gate and negative output
    Mux16(a=temp,b=nottemp,sel=no,out=out,out[0..7]=zr1,out[8..15]=zr2,out[15]=ng);
    // Zero output
    Or8Way(in=zr1,out=or1);
    Or8Way(in=zr2,out=or2);
    Or(a=or1,b=or2,out=or3);
    Not(in=or3,out=zr);



}