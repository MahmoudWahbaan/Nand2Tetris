// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/1/DMux8Way.hdl
/**
 * 8-way demultiplexor:
 * [a, b, c, d, e, f, g, h] = [in, 0,  0,  0,  0,  0,  0,  0] if sel = 000
 *                            [0, in,  0,  0,  0,  0,  0,  0] if sel = 001
 *                            [0,  0, in,  0,  0,  0,  0,  0] if sel = 010
 *                            [0,  0,  0, in,  0,  0,  0,  0] if sel = 011
 *                            [0,  0,  0,  0, in,  0,  0,  0] if sel = 100
 *                            [0,  0,  0,  0,  0, in,  0,  0] if sel = 101
 *                            [0,  0,  0,  0,  0,  0, in,  0] if sel = 110
 *                            [0,  0,  0,  0,  0,  0,  0, in] if sel = 111
 */
CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Two-layer architecture 
    // First layer : 1 Dmux gates for splitting input among 2 major groups
    // Second layer : 2 Dmux gates for splitting the signals to 4 minor groups
    // Thirs layer : 4 Dmux gates for splitting the signals inside each group

    // First layer:
    /*
    DMux(in=in , sel=sel[2] , a=ABCD , b=EFGH );

    // Second layer:

    DMux(in=ABCD , sel=sel[1] , a=AB , b=CD );
    DMux(in=EFGH , sel=sel[1] , a=EF , b=GH );

    // Third layer
    DMux(in=AB , sel=sel[0] , a=a , b=b );
    DMux(in=CD , sel=sel[0] , a=c , b=d );
    DMux(in=EF , sel=sel[0] , a=e , b=f );
    DMux(in=GH , sel=sel[0] , a=g , b=h );
    */
    //Alternative approach : Re-using the DMux4Way 
    
    DMux(in=in , sel=sel[2] , a=temp1 , b=temp2 );

    DMux4Way(in=temp1 , sel=sel[0..1] , a=a , b=b , c=c , d=d );
    DMux4Way(in=temp2 , sel=sel[0..1] , a=e , b=f , c=g , d=h );

}